#pragma once

#include <limits>

#include "bases.h"


namespace cauldron {
/**
 * Strategy which generates pseudo-random integer values.
 * @tparam Value: type of values generated by strategy.
 */
template<typename Value>
class Integers : public CloneHelper<Value, Integers<Value>> {
  static_assert(std::is_integral<Value>(),
                "``Value`` should be integral type.");
  static_assert(!std::is_same<Value, bool>(),
                "``Value`` should not be ``bool`` type, "
                    "use ``strategies::Booleans`` instead.");
 public:
  /**
   * @param min_value: minimum possible integer value.
   * @param max_value: maximum possible integer value.
   */
  explicit Integers(Value min_value = std::numeric_limits<Value>::min(),
                    Value max_value = std::numeric_limits<Value>::max())
      : min_value_(min_value),
        max_value_(max_value) {};

  /**
   * Generates pseudo-random integer value.
   */
  Value operator()() const override {
    static std::random_device random_device;
    std::uniform_int_distribution<Value> distribution(min_value_, max_value_);
    return distribution(random_device);
  }

 private:
  Value min_value_;
  Value max_value_;
};
}
